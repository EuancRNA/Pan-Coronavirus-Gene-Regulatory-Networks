gene2GO[[sample(names(gene2GO), 1)]]
which(c(T, T, T, F, F ,T, F, F, F, T))
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
if (y[[2]] %in% loc) {
return(TRUE)
} else {
return(FALSE)
}
})
return(names(gene2GO[[x]])[which(whichTermToReturn)])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
exprmntCodes <- c("EXP", "IDA", "IPI", "IMP", "IGI", "IEP", "HDA", "HMP", "HEP")
getGOTerms("100", exprmntCodes)
names(gene2GO[["1"]])
gene2GO[["GO:0002576"]]
gene2GO[["1"]]
gene2GO[["1"]]["GO0002576"]
gene2GO[["1"]]["GO:0003674"]
gene2GO[["1"]]["GO:0003674"][[2]]
gene2GO[["1"]]["GO:0003674"]
gene2GO[["1"]][["GO:0003674"]]
gene2GO[["1"]][["GO:0003674"]][[2]]
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
if (gene2GO[[x]][[y]][[2]] %in% loc) {
return(TRUE)
} else {
return(FALSE)
}
})
return(names(gene2GO[[x]])[which(whichTermToReturn)])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
getGOTerms("100", exprmntCodes)
getGOTerms("100", exprmntCodes)
which(c(T, T, F, T, F, F, F, T))
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
if (gene2GO[[x]][[y]][[2]] %in% loc) {
return(TRUE)
} else {
return(FALSE)
}
})
return(names(gene2GO[[x]])[which(whichTermToReturn)])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
getGOTerms("100", exprmntCodes)
log <- c("100")
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
if (gene2GO[[x]][[y]][[2]] %in% loc) {
return(TRUE)
} else {
return(FALSE)
}
})
return(names(gene2GO[[x]])[which(whichTermToReturn)])
})))
names(gene2GO)
names(gene2GO[['100']])
gene2GO[['100']][["GO:0006154"]][[2]] %in% loc
gene2GO[['100']][["GO:0006154"]][[2]] %in% exprmntCodes
#theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[['100']]), function(y) {
return(gene2GO[['100']][[y]][[2]] %in% loc)
})
#theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[['100']]), function(y) {
return(gene2GO[['100']][[y]][[2]] %in% exprmntCodes)
})
whichTermToReturn
which(whichTermToReturn)
which(unlist(whichTermToReturn))
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
return(gene2GO[[x]][[y]][[2]] %in% loc)
})
return(names(gene2GO[[x]])[which(unlist(whichTermToReturn))])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
getGOTerms("100", exprmntCodes)
getGOTerms(sample(names(gene2GO), 40))
getGOTerms(sample(names(gene2GO), 40), exprmntCodes)
rm(log)
rm(loc)
evCodes
unique(evCodes)
allEVs <- unique(evCodes)
allEVs
allEVs %in% exprmntCodes
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc = allEVs) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
return(gene2GO[[x]][[y]][[2]] %in% loc)
})
return(names(gene2GO[[x]])[which(unlist(whichTermToReturn))])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
getGOTerms("100")
getGOTerms("100", exprmntCodes)
getGOTerms(sample(names(gene2GO), 40))
getGOTerms(sample(names(gene2GO), 40), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10))
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
getGOTerms(sample(names(gene2GO), 10), exprmntCodes)
library(GO.db)
#library(msigdbr)
#library(clusterProfiler)
library(org.Hs.eg.db)
bpanc <- as.list(GOBPANCESTOR)
ccanc <- as.list(GOCCANCESTOR)
mvanc <- as.list(GOMFANCESTOR)
aList <- list(bpanc, ccanc, mvanc)
keys <- unique(unlist(lapply(aList, names)))
anc <- setNames(do.call(mapply, c(FUN=c, lapply(aList, `[`, keys))), keys)
## Get the term names and information for each of the GO terms
goInfo <- as.list(GOTERM)
## This will assign GO terms to each of the ~20,000 genes in humans
a <- org.Hs.egGO
mapped_genes <- mappedkeys(a)
gene2GO <- as.list(a[mapped_genes])
evCodes <- unlist(lapply(gene2GO, function(x) {
return(unlist(lapply(x, function(y) {
return(y[[2]])
})))
}))
allEVs <- unique(evCodes)
exprmntCodes <- c("EXP", "IDA", "IPI", "IMP", "IGI", "IEP", "HDA", "HMP", "HEP")
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc = allEVs) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
return(gene2GO[[x]][[y]][[2]] %in% loc)
})
return(names(gene2GO[[x]])[which(unlist(whichTermToReturn))])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
head(ggene2GO)
head(gene2GO)
gene2GO[1]
allEVs <- unique(evCodes)
head(evCodes)
head(evCodes, 30)
length(evCodes)
length(gene2GO[[1]])
length(evCodes)
sum(sapply(gene2GO, function(x) return(length(x))))
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc = allEVs) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
return(gene2GO[[x]][[y]][[2]] %in% loc)
})
return(names(gene2GO[[x]])[which(unlist(whichTermToReturn))])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
names(gene2GO)
sample(names(gene2GO), 10)
library(GO.db)
#library(msigdbr)
#library(clusterProfiler)
library(org.Hs.eg.db)
## This will create the list of ancestors for each GO term
bpanc <- as.list(GOBPANCESTOR)
ccanc <- as.list(GOCCANCESTOR)
mvanc <- as.list(GOMFANCESTOR)
aList <- list(bpanc, ccanc, mvanc)
keys <- unique(unlist(lapply(aList, names)))
anc <- setNames(do.call(mapply, c(FUN=c, lapply(aList, `[`, keys))), keys)
## Get the term names and information for each of the GO terms
goInfo <- as.list(GOTERM)
## This will assign GO terms to each of the ~20,000 genes in humans
a <- org.Hs.egGO
mapped_genes <- mappedkeys(a)
gene2GO <- as.list(a[mapped_genes])
evCodes <- unlist(lapply(gene2GO, function(x) {
return(unlist(lapply(x, function(y) {
return(y[[2]])
})))
}))
allEVs <- unique(evCodes)
exprmntCodes <- c("EXP", "IDA", "IPI", "IMP", "IGI", "IEP", "HDA", "HMP", "HEP")
## Given a vector of Entrez gene IDs (log) and a list of evidence codes (loc), it will retrieve the terms associated with those genes (filterning by the evidence codes),
## as well as the ancestors of those terms.
getGOTerms <- function(log, loc = allEVs) {
theTerms <- unique(unlist(lapply(log, function(x) {
whichTermToReturn <- lapply(names(gene2GO[[x]]), function(y) {
return(gene2GO[[x]][[y]][[2]] %in% loc)
})
return(names(gene2GO[[x]])[which(unlist(whichTermToReturn))])
})))
termsWithAncestors <- unique(union(unlist(lapply(theTerms, function(x) {
return(anc[[x]])
})), theTerms))
return(termsWithAncestors)
}
gene2GO[[321]]
gene2GO[[321]][[1]]
names(gene2GO[[321]])
names(gene2GO[[3217]])
names(gene2GO[[321]])
names(gene2GO[[321]])[["GO:0006396"]]
names(gene2GO[[321]])
names(gene2GO[[321]])[[1]]
gene2GO[[321]][[names(gene2GO[[321]])[[1]]]]
gene2GO[[321]][[names(gene2GO[[321]])[[1]]]][[2]]
gene2GO[[321]][[names(gene2GO[[321]])[[2]]]][[2]]
gene2GO[[321]][[names(gene2GO[[321]])[[2]]]][[2]] %in% exprmntCodes
gene2GO[[3212]][[names(gene2GO[[3212]])[[2]]]][[2]] %in% exprmntCodes
gene2GO[[32]][[names(gene2GO[[32]])[[2]]]][[2]] %in% exprmntCodes
# TEST WITH A SET OF GENES AND EXPERIMENT CODES
log1 <- sample(names(gene2GO), 10)
log1
getGOTerms(log1, exprmntCodes)
getGOTerms(log1, exprmntCodes)
# TEST WITH A SET OF GENES AND EXPERIMENT CODES
lst_logs <- lapply(1:100, function(x) {
return(sample(names(gene2GO), 10))
})
rnorm(10, 15)
rnorm(10, 15, 5)
as.integer(rnorm(10, 15, 5))
as.integer(rnorm(1, 15, 5))
# TEST WITH A SET OF GENES AND EXPERIMENT CODES
lst_logs <- lapply(1:100, function(x) {
return(sample(names(gene2GO), as.integer(rnorm(1, 15, 5))))
})
lst_logs
getGOTerms(lst_logs[[1]], exprmntCodes)
getGOTerms(lst_logs[[1]], exprmntCodes)
getGOTerms(lst_logs[[2]], exprmntCodes)
lst_annots <- lapply(lst_logs, function(x) {
return(getGOTerms(x, exprmntCodes))
})
lst_annots[[1]]
lapply(lst_annots, length)
unlist(lapply(lst_annots, length))
unlist(lst_annots)
table(unlist(lst_annots))
sort(table(unlist(lst_annots)), decreasing = T)
sort(table(unlist(lst_annots)), decreasing = T)
plot(1:100, sort(table(unlist(lst_annots)), decreasing = T))
plot(length(sort(table(unlist(lst_annots)), decreasing = T)), sort(table(unlist(lst_annots)), decreasing = T))
plot(1:length(sort(table(unlist(lst_annots)), decreasing = T)), sort(table(unlist(lst_annots)), decreasing = T))
plot(1:100, sort(table(unlist(lst_annots)), decreasing = T))
sort(table(unlist(lst_annots)), decreasing = T)
unlist(lst_annots)
unique(unlist(lst_annots))
# Implementation of the ECLaT algorithm for frequent itemset mining
vert <- unique(unlist(lst_annots))
sort(table(unlist(lst_annots)), decreasing = T)
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
vert_data[["Hello"]]
is.null(vert_data[["Hello"]])
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
lapply(lst_annots, function(x) {
lapply(x, function(y) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
})
})
length(vert_data)
head(vert_data)
lst_annots[[1]]
for (x in lst_annots) {
for (y in x) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
}
}
head(vert_data)
lst_annots[1]
names(lst_annots) <- paste0("a", 1:length(lst_annots))
lst_annots[1]
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
for (x in names(lst_annots)) {
for (y in lst_annots[[x]]) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
}
}
head(vert_data)
sort(table(unlist(lst_annots)), decreasing = T)
vert_data[["GO:0032886"]]
sort(table(unlist(lst_annots)), decreasing = T)
vert_data[["GO:0008134"]]
sort(table(unlist(lst_annots)), decreasing = T)
vert_data[["GO:0034097"]]
tail(vert_data)
vert_data[sample(1:length(vert_data), 3)]
vert_data[sample(1:length(vert_data), 3)]
vert_data[[1]]
vert_data[[2]]
intersect(vert_data[[2]], vert_data[[2]])
intersect(vert_data[[2]], vert_data[[3]])
anc[[421]]
anc[421]
intersect(vert_data[["GO:0042136"]], vert_data[["GO:0009987"]])
vert_data[["GO:0042136"]]
vert_data[["GO:0009987"]]
head(goInfo)
vert_data[1]
names(vert_data[1])
goInfo[[names(vert_data[1])]]
goInfo[[names(vert_data[1892])]]
anc[["GO:0015078"]]
goInfo[anc[["GO:0015078"]]]
head(vert_data)
length(lst_annots)
minSupp <- 0.4 * length(lst_annots)
minSupp
length(vert_data)
hist(sapply(vert_data, length))
sapply(vert_data, length)
summary(sapply(vert_data, length))
which(sapply(vert_data, length) >= minSupp)
length(which(sapply(vert_data, length) >= minSupp))
minSupp <- 0.2 * length(lst_annots)
length(which(sapply(vert_data, length) >= minSupp))
aList <- list(a1 = c("apple", "banana", "orange", "strawberry", "cherry"),
a2 = c("banana", "cherry", "apple"),
a3 = c("apple", "strawberry", "pineapple"),
a4 = c("raspberry", "strawberr", "apple"),
a5 = c("pineapple", "lemon", "orange", "banana", "apple"),
a6 = c("lemon", "apple", "blueberry"),
a7 = c("watermelon", "apple", "banana", "mango"),
a8 = c("mango", "cherry", "apple", "lemon"),
a9 = c("orange", "banana", "strawberry"),
a10 = c("mango", "strawberry"))
aList
unlist(aList)
table(unlist(aList))
aList <- list(a1 = c("apple", "banana", "orange", "strawberry", "cherry"),
a2 = c("banana", "cherry", "apple"),
a3 = c("apple", "strawberry", "pineapple"),
a4 = c("raspberry", "strawberry", "apple"),
a5 = c("pineapple", "lemon", "orange", "banana", "apple"),
a6 = c("lemon", "apple", "blueberry"),
a7 = c("watermelon", "apple", "banana", "mango"),
a8 = c("mango", "cherry", "apple", "lemon"),
a9 = c("orange", "banana", "strawberry"),
a10 = c("mango", "strawberry"))
vertical_data <- list()
for (x in names(aList)) {
for (y in aList[[x]]) {
if (is.null(vertical_data[[y]])) {
vertical_data[[y]] <- x
} else {
vertical_data[[y]] <- c(x, vertical_data[[y]])
}
}
}
vertical_data
vertical_data <- list()
vertical_data <- list()
lapply(names(aList), function(x) {
lapply(aList[[x]], function(y) {
if (is.null(vertical_data[[y]])) {
vertical_data[[y]] <- x
} else {
vertical_data[[y]] <- c(x, vertical_data[[y]])
}
})
})
vertical_data
vertical_data <- list()
for (x in names(aList)) {
for (y in aList[[x]]) {
if (is.null(vertical_data[[y]])) {
vertical_data[[y]] <- x
} else {
vertical_data[[y]] <- c(x, vertical_data[[y]])
}
}
}
vertical_data
# Implementation of the ECLaT algorithm for frequent itemset mining
vert_data <- list()
for (x in names(lst_annots)) {
for (y in lst_annots[[x]]) {
if (is.null(vert_data[[y]])) {
vert_data[[y]] <- x
} else {
vert_data[[y]] <- c(x, vert_data[[y]])
}
}
}
vert_data <- split(rep(names(lst_annots), lengths(lst_annots)), unlist(lst_annots))
head(vert_data)
length(vert_data)
tail(vert_daata)
tail(vert_data)
rm(aList)
rm(vertical_data)
head(vert_data)
hist(sapply(vert_data, length))
summary(sapply(vert_data, length))
barplot(sapply(vert_data, length))
boxplot(sapply(vert_data, length))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
install.packages("spatial")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("OmnipathR")
setRepositories()
install.packages("installr")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade"))
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(shiny)
library(ggplot2)
library(stringr)
library(ggplot2)
setwd("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/theApp")
list.files()
setwd("/home/zuhaib/Desktop/covid19Research/hackSeqRNA/theApp/data_GSE148729_Calu3_totalRNA/")
list.files()
fls <- list.files()[grep("long_", list.files())]
lfs
fls
runApp('~/Desktop/covid19Research/hackSeqRNA/theApp')
runApp('~/Desktop/covid19Research/hackSeqRNA/theApp')
runApp('~/Desktop/covid19Research/hackSeqRNA/theApp')
runApp('~/Desktop/covid19Research/hackSeqRNA/theApp')
